// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique @db.VarChar(60)
  username         String    @unique @db.VarChar(35)
  password         String?   @db.VarChar(200)
  role             Role?     @default(USER)
  firstname        String?
  lastname         String?
  phone            String?   @db.VarChar(15)
  avatar           String?
  birthday         DateTime?
  gender           Gender?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  Course           Course[]
  Comment          Comment[]
  Review           Review[]
}

model Course {
  id     String  @id @default(cuid())
  title  String
  user   User    @relation(fields: [userId], references: [id])
  userId String
  Video  Video[]
}

model Video {
  id           String   @id @default(cuid())
  title        String
  bio          String
  course       Course   @relation(fields: [courseId], references: [id])
  courseId     String
  likeCount    Int      @default(0)
  dislikeCount Int      @default(0)
  Review       Review[]
}

model Comment {
  id     String   @id @default(cuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  text   String
  Review Review[]
}

model Review {
  id        String       @id @default(cuid())
  type      ReactionType
  comment   Comment?     @relation(fields: [commentId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  Video     Video?       @relation(fields: [videoId], references: [id])
  videoId   String?
  commentId String?
}

enum ReactionType {
  LIKE
  DISLIKE
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
}

// Owner : postgres 
// Database : e-learning-DB
// Port : 5433
// hostname : localhost
